<%- include('partials/header', { user, guild, activePage, botAvatarUrl }) %>

<div id="wrapper">
    
    <%- include('partials/sidebar', { user, guild, activePage, botAvatarUrl }) %>

    <div id="content">
        <div class="main-content">
            <h1><i class="fas fa-user-plus"></i> AutoRole</h1>
            <p>Atribua automaticamente um ou mais cargos (roles) a novos membros que entrarem no seu servidor.</p>

            <% if (message === 'success') { %>
                <div class="alert alert-success">
                    ✅ Configurações de AutoRole salvas com sucesso!
                </div>
            <% } %>
            
            <% if (settings.enabled && settings.roles.length === 0) { %>
                <div class="alert alert-warning">
                    ⚠️ **ATENÇÃO:** O AutoRole está **ATIVO**, mas você não selecionou nenhum cargo. Novos membros **não receberão cargo**!
                </div>
            <% } %>

            <form method="POST" action="/dashboard/<%= guild.id %>/autorole" class="settings-section">
                
                <h2>Configurações Gerais</h2>
                
                <label class="checkbox-container">
                    <input type="checkbox" name="enabled" id="autorole-enabled" value="true" <%= settings.enabled ? 'checked' : '' %>>
                    Ativar AutoRole
                </label>
                
                <div class="feature-box">
                    <h2>Cargos a Atribuir</h2>
                    
                    <p>Selecione os cargos que deseja atribuir automaticamente aos novos membros. O Bot só pode atribuir cargos que estejam **abaixo** do cargo mais alto dele na lista de cargos.</p>
                    
                    <label for="roles-add-select">Adicionar Cargo:</label>
                    <select id="roles-add-select">
                        <option value="">-- Selecione um Cargo --</option>
                        <% availableRoles.forEach(role => { %>
                            <% if (!settings.roles.includes(role.id)) { %>
                                <option 
                                    value="<%= role.id %>" 
                                    data-name="<%= role.name %>" 
                                    data-color="<%= role.color %>"
                                >
                                    <%= role.name %> 
                                </option>
                            <% } %>
                        <% }); %>
                    </select>

                    <div class="selected-roles-container" id="selected-roles-container">
                        <% 
                            const rolesMap = {}; 
                            availableRoles.forEach(r => rolesMap[r.id] = r);
                        %>
                        <% settings.roles.forEach(roleId => { %>
                            <% const role = rolesMap[roleId]; %>
                            <% if (role) { %>
                                <span 
                                    class="role-tag" 
                                    data-role-id="<%= role.id %>" 
                                    style="border-color: <%= role.color %>; background-color: <%= role.color %>30; color: <%= role.color %>;"
                                >
                                    <%= role.name %>
                                    <span 
                                        class="remove-role" 
                                        style="background-color: <%= role.color %>;" 
                                        onclick="removeRole('<%= role.id %>')"
                                    >
                                        x
                                    </span>
                                </span>
                            <% } %>
                        <% }); %>
                    </div>
                    
                    <input type="hidden" name="roles" id="roles-hidden-input" value="<%= settings.roles.join(',') %>">
                </div>
                
                <button type="submit" class="btn btn-primary btn-save-large">
                    <i class="fas fa-save"></i> Salvar Configurações
                </button>
            </form>
        </div>
    </div>
</div>

<script>
    // Armazena todos os cargos disponíveis (para fins de adicionar/remover)
    const availableRolesData = [
        <% availableRoles.forEach(role => { %>
            { id: '<%= role.id %>', name: '<%= role.name %>', color: '<%= role.color %>' },
        <% }); %>
    ];

    const rolesSelect = document.getElementById('roles-add-select');
    const rolesContainer = document.getElementById('selected-roles-container');
    const rolesHiddenInput = document.getElementById('roles-hidden-input');

    // Funções de manipulação de cargos
    function updateHiddenInput() {
        const selectedIds = Array.from(rolesContainer.querySelectorAll('.role-tag'))
                                 .map(tag => tag.getAttribute('data-role-id'));
        rolesHiddenInput.value = selectedIds.join(',');
    }

    function removeRole(roleId) {
        const roleTag = rolesContainer.querySelector(`[data-role-id="${roleId}"]`);
        if (roleTag) {
            roleTag.remove();
            
            // Re-adiciona a opção ao <select>
            const roleData = availableRolesData.find(r => r.id === roleId);
            if (roleData) {
                const option = document.createElement('option');
                option.value = roleData.id;
                option.textContent = roleData.name;
                option.setAttribute('data-name', roleData.name);
                option.setAttribute('data-color', roleData.color);
                rolesSelect.appendChild(option);
            }
            
            updateHiddenInput();
        }
    }

    function addRole(roleId, roleName, roleColor) {
        // 1. Cria a tag visual
        const tagHtml = `
            <span 
                class="role-tag" 
                data-role-id="${roleId}" 
                style="border-color: ${roleColor}; background-color: ${roleColor}30; color: ${roleColor};"
            >
                ${roleName}
                <span 
                    class="remove-role" 
                    style="background-color: ${roleColor};" 
                    onclick="removeRole('${roleId}')"
                >
                    x
                </span>
            </span>
        `;
        rolesContainer.insertAdjacentHTML('beforeend', tagHtml);

        // 2. Remove a opção do <select>
        const optionToRemove = rolesSelect.querySelector(`option[value="${roleId}"]`);
        if (optionToRemove) {
            optionToRemove.remove();
        }
        
        // 3. Atualiza o input oculto para salvar
        updateHiddenInput();
    }

    // Event listener para adicionar o cargo ao selecionar no dropdown
    rolesSelect.addEventListener('change', (e) => {
        const roleId = e.target.value;
        if (roleId) {
            const selectedOption = e.target.options[e.target.selectedIndex];
            const roleName = selectedOption.getAttribute('data-name');
            const roleColor = selectedOption.getAttribute('data-color');
            
            addRole(roleId, roleName, roleColor);
            
            // Volta o select para a opção padrão
            e.target.value = '';
        }
    });

    // Ponto de inicialização: Atualiza o input oculto na carga da página
    window.onload = updateHiddenInput; 

</script>

<%- include('partials/footer') %>